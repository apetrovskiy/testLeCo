{
  "uid" : "4518b7f49b9eb84f",
  "name" : "test_check_array_formation_through_concatenation[input_array3-pieces3-True]",
  "fullName" : "src.test.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.test_check_array_formation_through_concatenation#test_check_array_formation_through_concatenation",
  "historyId" : "de35a096413bfc8e53fe0fa7e317c798",
  "time" : {
    "start" : 1618517334893,
    "stop" : 1618517334893,
    "duration" : 0
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert True == False\n +  where False = <bound method Solution.canFormArray of <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0>>([91, 4, 64, 78], [[78], [4, 64], [91]])\n +    where <bound method Solution.canFormArray of <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0>> = <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0>.canFormArray\n +      where <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0> = Solution()",
  "statusTrace" : "input_array = [91, 4, 64, 78], pieces = [[78], [4, 64], [91]]\nexpected_result = True\n\n    @pytest.mark.parametrize(\"input_array,pieces,expected_result\", test_data)\n    def test_check_array_formation_through_concatenation(\n            input_array: List[int],\n            pieces: List[List[int]],\n            expected_result: bool):\n>       assert expected_result == Solution().canFormArray(input_array, pieces)\nE       assert True == False\nE        +  where False = <bound method Solution.canFormArray of <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0>>([91, 4, 64, 78], [[78], [4, 64], [91]])\nE        +    where <bound method Solution.canFormArray of <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0>> = <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0>.canFormArray\nE        +      where <src.main.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.solution.Solution object at 0x7fd3c14efbe0> = Solution()\n\nsrc/test/java/challenges/c20210101_20210107/CheckArrayFormationThroughConcatenation/test_check_array_formation_through_concatenation.py:21: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "src.test.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation"
  }, {
    "name" : "suite",
    "value" : "test_check_array_formation_through_concatenation"
  }, {
    "name" : "host",
    "value" : "fv-az129-88"
  }, {
    "name" : "thread",
    "value" : "3113-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "src.test.java.challenges.c20210101_20210107.CheckArrayFormationThroughConcatenation.test_check_array_formation_through_concatenation"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_result",
    "value" : "True"
  }, {
    "name" : "input_array",
    "value" : "[91, 4, 64, 78]"
  }, {
    "name" : "pieces",
    "value" : "[[78], [4, 64], [91]]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "4518b7f49b9eb84f.json",
  "parameterValues" : [ "True", "[91, 4, 64, 78]", "[[78], [4, 64], [91]]" ]
}